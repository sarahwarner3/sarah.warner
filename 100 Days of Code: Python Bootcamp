-------TIP CALCULATOR-------

print("Welcome to the tip calculator!")
bill = float(input("What was the total bill? $"))
tip = float(input("What percentage tip would you like to give? 10, 12, or 15 "))
people = int(input("How many people to split the bill? "))

bill_plus_tip = float(((tip / 100) * bill + bill))
bill_per_person = (bill_plus_tip / people)
final_amount = round(bill_per_person, 2)

print(f"Each person should pay: ${final_amount}")





-------TREASURE ISLAND GAME-------

print('''
*******************************************************************************
          |                   |                  |                     |
 _________|________________.=""_;=.______________|_____________________|_______
|                   |  ,-"_,=""     `"=.|                  |
|___________________|__"=._o`"-._        `"=.______________|___________________
          |                `"=._o`"=._      _`"=._                     |
 _________|_____________________:=._o "=._."_.-="'"=.__________________|_______
|                   |    __.--" , ; `"=._o." ,-"""-._ ".   |
|___________________|_._"  ,. .` ` `` ,  `"-._"-._   ". '__|___________________
          |           |o`"=._` , "` `; .". ,  "-._"-._; ;              |
 _________|___________| ;`-.o`"=._; ." ` '`."\ ` . "-._ /_______________|_______
|                   | |o ;    `"-.o`"=._``  '` " ,__.--o;   |
|___________________|_| ;     (#) `-.o `"=.`_.--"_o.-; ;___|___________________
____/______/______/___|o;._    "      `".o|o_.--"    ;o;____/______/______/____
/______/______/______/_"=._o--._        ; | ;        ; ;/______/______/______/_
____/______/______/______/__"=._o--._   ;o|o;     _._;o;____/______/______/____
/______/______/______/______/____"=._o._; | ;_.--"o.--"_/______/______/______/_
____/______/______/______/______/_____"=.o|o_.--""___/______/______/______/____
/______/______/______/______/______/______/______/______/______/______/_____ /
*******************************************************************************
''')
print("Welcome to Treasure Island.")
print("Your mission is to find the treasure.")
crossroad_1 = (input("You are at a crossroad. Which way would you like to go: left or right"))

if crossroad_1 == "Left" or crossroad_1 == "left":
    crossroad_2 = (input("You have arrived at a lake and can see an island. Do you wait for a boat or swim?"))
    if crossroad_2 == "Wait" or crossroad_2 == "wait" or crossroad_2 == "wait for a boat":
        crossroad_3 = input("You make it to the island and come upon a house with 3 doors. Which door do you choose: "
                            "red, yellow, or blue?")
        if crossroad_3 == "Red" or crossroad_3 == "red" or crossroad_3 == "red door":
            print("The door locks behind you. You flip on the lights to see a killer clown waiting for you. RIP. Game Over.")
        elif crossroad_3 == "Blue" or crossroad_3 == "blue" or crossroad_3 == "blue door":
            print("The door locks behind you. You flip on what you think is a light switch. Suddenly the floor crumbles "
                  "away and below is flowing lava! You have been incinerated. RIP. Game Over.")
        elif crossroad_3 == "Yellow" or crossroad_3 == "yellow" or crossroad_3 == "yellow door":
            print("Congrats, you've found the treasure. You win!")
        else:
            print("You're answer is invalid. Game Over.")
    elif crossroad_2 == "Swim" or crossroad_2 == "swim" or crossroad_2 == "swim to the island":
        print("A school of piranhas has ripped to to shreds. RIP. Game Over.")
    else:
        print("You're answer is invalid. Game Over.")
elif crossroad_1 == "Right" or crossroad_1 == "right" or crossroad_1 == "go right":
    print("You fell into a deep dark well with no way out. Game Over.")
else:
    print("You're answer is invalid. Game Over.")





-------ROCK, PAPER, SCISSORS GAME-------

rock = '''
    _______
---'   ____)
      (_____)
      (_____)
      (____)
---.__(___)
'''

paper = '''
    _______
---'   ____)____
          ______)
          _______)
         _______)
---.__________)
'''

scissors = '''
    _______
---'   ____)____
          ______)
       __________)
      (____)
---.__(___)
'''

game_images = [rock, paper, scissors]

import random

user_choice = int(input('What do you choose? Type "0" for Rock, "1" for Paper, or "2: for Scissors.\n'))
if user_choice == 0:
    print("You chose rock" + rock)
elif user_choice == 1:
    print("You chose paper" + paper)
elif user_choice == 2:
    print("You chose scissors" + scissors)

computer_choice = random.randint(0,2)
if computer_choice == 0:
    print("Computer chose rock" + rock)
elif computer_choice == 1:
    print("Computer chose paper" + paper)
elif computer_choice == 2:
    print("Computer chose scissors" + scissors)

if user_choice == computer_choice:
    print("Tie game.")
elif user_choice == 0 and computer_choice == 1:
    print("You lose.")
elif user_choice == 0 and computer_choice == 2:
    print("You win.")
elif user_choice == 1 and computer_choice == 0:
    print("You win.")
elif user_choice == 1 and computer_choice == 2:
    print("You lose.")
elif user_choice == 2 and computer_choice == 0:
    print("You lose.")
elif user_choice == 2 and computer_choice == 1:
    print("You win.")





-------PASSWORD GENERATOR-------

import random
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']

print("Welcome to the PyPassword Generator!")
nr_letters = int(input("How many letters would you like in your password?\n"))
nr_symbols = int(input(f"How many symbols would you like?\n"))
nr_numbers = int(input(f"How many numbers would you like?\n"))

#Easy Level
password = ""

for Letters in range(1,nr_letters + 1):
    random_letter = random.choice(letters)
    password = password + random_letter

for Symbols in range(1,nr_symbols + 1):
    random_symbol = random.choice(symbols)
    password = password + random_symbol

for Numbers in range(1,nr_numbers + 1):
    random_number = random.choice(numbers)
    password = password + random_number

print(password)

#Hard Level
password = []

for characters in range(1,nr_letters + 1):
    password.append(random.choice(letters))

for characters in range(1,nr_symbols + 1):
    password.append(random.choice(symbols))

for characters in range(1,nr_numbers + 1):
    password.append(random.choice(numbers))

random.shuffle(password)

final_password = ""
for characters in password:
    final_password += characters

print(f"Your password is: {final_password}")





-------HANGMAN GAME-------

import random
import hangman_words

lives = 6

import hangman_art
chosen_word = random.choice(hangman_words.word_list)

print(hangman_art.logo)

placeholder = ""
word_length = len(chosen_word)
for position in range(word_length):
    placeholder += "_"
print("Word to guess: " + placeholder)

game_over = False
correct_letters = []

while not game_over:

    print(f"You have {lives}/6 lives remaining.")
    guess = input("Guess a letter: ").lower()

    if guess in correct_letters:
        print(f"You've already guessed {guess}. Choose another letter.")

    display = ""

    for letter in chosen_word:
        if letter == guess:
            display += letter
            correct_letters.append(guess)
        elif letter in correct_letters:
            display += letter
        else:
            display += "_"

    print("Word to guess: " + display)

    if guess not in chosen_word:
        lives -= 1
        print(F"{guess} is not in the word. You lose a life.")

        if lives == 0:
            game_over = True

            # TODO 7: - Update the print statement below to give the user the correct word they were trying to guess.
            print(f"You lose. The word was {chosen_word}.")

    if "_" not in display:
        game_over = True
        print("Congrats, you win.")

    print(hangman_art.stages[lives])





-------CAESAR CIPHER-------

import art
print(art.logo)

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

def caesar(original_text, shift_amount, encode_or_decode):
    output_text = ""
    if encode_or_decode == "decode":
        shift_amount *= -1

    for letter in original_text:
        if letter not in alphabet:
            output_text += letter
        else:
            shifted_position = alphabet.index(letter) + shift_amount
            shifted_position %= len(alphabet)
            output_text += alphabet[shifted_position]
    print(f"Here is the {encode_or_decode}d result: {output_text}")

should_continue = True

while should_continue:
    direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n").lower()
    text = input("Type your message:\n").lower()
    shift = int(input("Type the shift number:\n"))

    caesar(original_text=text, shift_amount=shift, encode_or_decode=direction)

    restart = input("Type 'yes' if you want to go again. Otherwise, type 'no'.\n").lower()
    if restart == "no":
        should_continue = False
        print("Goodbye.")





-------CALCULATOR-------

import art
print(art.logo)

def add(n1, n2):
    return n1 + n2

def subtract(n1, n2):
    return n1 - n2

def multiply(n1, n2):
    return n1 * n2

def divide(n1, n2):
    return n1 / n2

operations = {
    "+": add,
    "-": subtract,
    "*": multiply,
    "/": divide,
}

def calculator():
    continue_working = True
    number_1 = float(input("What's the first number?: "))

    while continue_working:
        for symbol in operations:
            print(symbol)
        operation_symbol = input("Pick an operation: ")
        number_2 = float(input("What's the next number?: "))
        answer = (operations[operation_symbol](number_1, number_2))
        print(f"{number_1} {operation_symbol} {number_2} = {answer}")

        choice = input(f"Type 'y' to continue calculating with {answer}, or type 'n' to start a new calculation.").lower()

        if choice == 'y':
            number_1 = answer
        else:
            continue_working = False
            print("\n" * 20)
            print(art.logo)
            calculator()

calculator()





-------BLACKJACK GAME-------

import random

import art

def deal_card():
    """Returns a random card from the deck"""
    cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
    card = random.choice(cards)
    return card

def calculate_score(cards):
    """Takes a list of cards and return the score calculated from cards"""
    if sum(cards) == 21 and len(cards) == 2:
        return 0
    if 11 in cards and sum(cards) > 21:
        cards.remove(11)
        cards.append(1)
    return sum(cards)

def compare(u_score, c_score):
    if u_score == c_score:
        return "Draw"
    elif c_score == 0:
        return "You lose! Opponent has Blackjack."
    elif u_score == 0:
        return "You win! You have Blackjack."
    elif u_score > 21:
        return "You lose! You went over 21."
    elif c_score > 21:
        return "You win! Opponent went over 21."
    elif u_score > c_score:
        return "You win! Your score is higher than you opponent's score."
    else:
        return "You lose. Your score is lower than your opponent's score."

def play_game():
    print(art.logo)
    user_cards = []
    computer_cards = []
    computer_score = -1
    user_score = -1
    is_game_over = False

    for _ in range(2):
        user_cards.append(deal_card())
        computer_cards.append(deal_card())

    while not is_game_over:
        user_score = calculate_score(user_cards)
        computer_score = calculate_score(computer_cards)
        print(f"Your cards: {user_cards}, current score: {user_score}")
        print(f"Computer's first card: {computer_cards[0]}")

        if user_score == 0 or computer_score == 0 or user_score > 21:
            is_game_over = True
        else:
            user_should_deal = input("Type 'y' to get another card or type 'n' to pass: ")
            if user_should_deal == 'y':
                user_cards.append(deal_card())
            else:
                is_game_over = True

    while computer_score != 0 and computer_score < 17:
        computer_cards.append(deal_card())
        computer_score = calculate_score(computer_cards)

    print(f"Your final hand: {user_cards}, final score: {user_score}")
    print(f"Computer's final hand: {computer_cards}, final score: {computer_score}")
    print(compare(user_score, computer_score))

while input("Do you want to play a game of Blackjack? Type 'y' or 'n': ").lower() == "y":
    print("\n" * 20)
    play_game()





-------NUMBER GUESSING GAME-------

import random
logo = """
  ▄████  █    ██ ▓█████   ██████   ██████    ▄▄▄█████▓ ██░ ██ ▓█████     ███▄    █  █    ██  ███▄ ▄███▓ ▄▄▄▄   ▓█████  ██▀███  
 ██▒ ▀█▒ ██  ▓██▒▓█   ▀ ▒██    ▒ ▒██    ▒    ▓  ██▒ ▓▒▓██░ ██▒▓█   ▀     ██ ▀█   █  ██  ▓██▒▓██▒▀█▀ ██▒▓█████▄ ▓█   ▀ ▓██ ▒ ██▒
▒██░▄▄▄░▓██  ▒██░▒███   ░ ▓██▄   ░ ▓██▄      ▒ ▓██░ ▒░▒██▀▀██░▒███      ▓██  ▀█ ██▒▓██  ▒██░▓██    ▓██░▒██▒ ▄██▒███   ▓██ ░▄█ ▒
░▓█  ██▓▓▓█  ░██░▒▓█  ▄   ▒   ██▒  ▒   ██▒   ░ ▓██▓ ░ ░▓█ ░██ ▒▓█  ▄    ▓██▒  ▐▌██▒▓▓█  ░██░▒██    ▒██ ▒██░█▀  ▒▓█  ▄ ▒██▀▀█▄  
░▒▓███▀▒▒▒█████▓ ░▒████▒▒██████▒▒▒██████▒▒     ▒██▒ ░ ░▓█▒░██▓░▒████▒   ▒██░   ▓██░▒▒█████▓ ▒██▒   ░██▒░▓█  ▀█▓░▒████▒░██▓ ▒██▒
 ░▒   ▒ ░▒▓▒ ▒ ▒ ░░ ▒░ ░▒ ▒▓▒ ▒ ░▒ ▒▓▒ ▒ ░     ▒ ░░    ▒ ░░▒░▒░░ ▒░ ░   ░ ▒░   ▒ ▒ ░▒▓▒ ▒ ▒ ░ ▒░   ░  ░░▒▓███▀▒░░ ▒░ ░░ ▒▓ ░▒▓░
  ░   ░ ░░▒░ ░ ░  ░ ░  ░░ ░▒  ░ ░░ ░▒  ░ ░       ░     ▒ ░▒░ ░ ░ ░  ░   ░ ░░   ░ ▒░░░▒░ ░ ░ ░  ░      ░▒░▒   ░  ░ ░  ░  ░▒ ░ ▒░
░ ░   ░  ░░░ ░ ░    ░   ░  ░  ░  ░  ░  ░       ░       ░  ░░ ░   ░         ░   ░ ░  ░░░ ░ ░ ░      ░    ░    ░    ░     ░░   ░ 
      ░    ░        ░  ░      ░        ░               ░  ░  ░   ░  ░            ░    ░            ░    ░         ░  ░   ░     
                                                                                                             ░                 
"""

print(logo)

print("Welcome to the Number Guessing Game!")
print("I'm thinking of a number between 1 and 100.")
number = random.randint(1,100)
# print(number)
playing_game = True
difficulty = input("Choose a difficulty. Type 'easy' or 'hard'.").lower()

if difficulty == "easy":
    print("You have 10 attempts remaining to guess the number.")
    attempts = 10
else:
    print("You have 5 attempts remaining to guess the number.")
    attempts = 5

while playing_game is True:
    make_a_guess = int(input("Make a guess: "))
    if make_a_guess == number:
        playing_game = False
        print(f"You got it! The answer was {number}.")
    elif make_a_guess < number:
        print("Too low.")
        attempts = attempts - 1
        if attempts == 0:
            playing_game = False
            print(f"You lose! The number to guess was {number}.")
        else:
            print("Guess again.")
            print(f"You have {attempts} attempts remaining to guess the number.")
    elif make_a_guess > number:
        print("Too high.")
        attempts = attempts - 1
        if attempts == 0:
            playing_game = False
            print(f"You lose! The number to guess was {number}.")
        else:
            print("Guess again.")
            print(f"You have {attempts} attempts remaining to guess the number.")





-------HIGHER OR LOWER GAME-------

import game_data
import random

logo = """ __    __   __    _______  __    __   _______ .______        
|  |  |  | |  |  /  _____||  |  |  | |   ____||   _  \       
|  |__|  | |  | |  |  __  |  |__|  | |  |__   |  |_)  |      
|   __   | |  | |  | |_ | |   __   | |   __|  |      /       
|  |  |  | |  | |  |__| | |  |  |  | |  |____ |  |\  \----.  
|__|  |__| |__|  \______| |__|  |__| |_______|| _| `._____|                                                             
 __        ______   ____    __    ____  _______ .______      
|  |      /  __  \  \   \  /  \  /   / |   ____||   _  \     
|  |     |  |  |  |  \   \/    \/   /  |  |__   |  |_)  |    
|  |     |  |  |  |   \            /   |   __|  |      /     
|  `----.|  `--'  |    \    /\    /    |  |____ |  |\  \----.
|_______| \______/      \__/  \__/     |_______|| _| `._____|
"""

vs = """
____    ____   _______.
\   \  /   /  /       |
 \   \/   /  |   (----`
  \      /    \   \    
   \    / .----)   |   
    \__/  |_______/
"""

print(logo)
data_list = game_data.data
score = 0
game_continue = True
choice_b = random.choice(data_list)

def format_data(choice):
    """Takes the account data and returns the printable format"""
    account_name = choice["name"]
    account_description = choice["description"]
    account_country = choice["country"]
    return f"{account_name}, a {account_description} from {account_country}"

def check_answer(user_guess, a_followers, b_followers):
    """Takes the user's guess and follower counts and returns if the user got it right"""
    if a_followers > b_followers:
        return user_guess == "a"
    else:
        return user_guess == "b"

while game_continue:
    choice_a = choice_b
    choice_b = random.choice(data_list)
    if choice_a == choice_b:
        choice_b = random.choice(data_list)

    print(f"Compare A: {format_data(choice_a)}")
    print(vs)
    print(f"Against B: {format_data(choice_b)}")

    guess = input("Who has more followers? Type 'A' or 'B'").lower()

    print("\n" * 20)
    print(logo)

    a_follower_count = choice_a["follower_count"]
    b_follower_count = choice_b["follower_count"]

    is_correct = check_answer(guess, a_follower_count, b_follower_count)

    print(f"{choice_a["name"]} has {a_follower_count} million followers. {choice_b["name"]} has {b_follower_count} million followers.")

    if is_correct:
        score = score + 1
        print(f"You're right! Current score: {score}")
    else:
        print(f"Sorry, you're wrong. Final score: {score}")
        game_continue = False





-------COFFEE MACHINE-------

MENU = {
    "espresso": {
        "ingredients": {
            "water": 50,
            "coffee": 18,
        },
        "cost": 1.5,
    },
    "latte": {
        "ingredients": {
            "water": 200,
            "milk": 150,
            "coffee": 24,
        },
        "cost": 2.5,
    },
    "cappuccino": {
        "ingredients": {
            "water": 250,
            "milk": 100,
            "coffee": 24,
        },
        "cost": 3.0,
    }
}

resources = {
    "water": 300,
    "milk": 200,
    "coffee": 100,
}

profit = 0
machine_on = True

def check_resources(order_ingredients):
    """Returns if resources are sufficient for an order."""
    for item in order_ingredients:
        if order_ingredients[item] >= resources[item]:
            print(f"Sorry, there is not enough {item}.")
            return False
        else:
            return True

def process_coins():
    """Returns the total calculated from coins inserted."""
    print("Please insert coins.")
    total = int(input("How many quarters?: ")) * 0.25
    total += int(input("How many dimes?: ")) * 0.10
    total += int(input("How many nickels?: ")) * 0.05
    total += int(input("How many pennies?: ")) * 0.01
    return total

def transaction(money_received, cost_of_drink):
    """Returns True if payment is accepted or False if payment is insufficient."""
    if money_received >= cost_of_drink:
        change = round(money_received - cost_of_drink, 2)
        print(f"Here is ${change} in change.")
        global profit
        profit += cost_of_drink
        return True
    else:
        print("Sorry, that's not enough money. Payment refunded.")
        return False

def make_coffee(drink_name, order_ingredients):
    """Deduct required ingredients from resources."""
    for item in order_ingredients:
        resources[item] -= order_ingredients[item]
    print(f"Here is your {drink_name} ☕️")

while machine_on:
    choice = input("What would you like? Espresso, Latte, or Cappuccino:").lower()
    if choice == "off":
        machine_on = False
        print("Machine turning off. Goodbye.")
    elif choice == "report":
        print(f"Water: {resources['water']} ml")
        print(f"Milk: {resources['milk']} ml")
        print(f"Coffee: {resources['coffee']} g")
        print(f"Money: ${profit}")
    else:
        drink = MENU[choice]
        if check_resources(drink["ingredients"]):
            payment = process_coins()
            if transaction(payment, drink["cost"]):
                make_coffee(choice, drink["ingredients"])





-------QUIZ GAME (Object Oriented Programming)-------

question_data = [
    {"question": "Approximately one quarter of human bones are in the feet.", "correct_answer": "True"},
    {"question": "The total surface area of a human lungs is the size of a football pitch.", "correct_answer": "True"},
    {"type": "boolean",
     "difficulty": "hard",
     "category": "Science &amp; Nature",
     "question": "It was once believed that injecting shark cartilage into people would prevent them from contracting cancer.",
     "correct_answer": "True",
     "incorrect_answers": ["False"]
     },
    {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
     "question": "An average human can go two weeks without water.",
     "correct_answer": "False", "incorrect_answers": ["True"]},
    {"type": "boolean", "difficulty": "medium", "category": "Science &amp; Nature",
     "question": "'Tachycardia' or 'Tachyarrhythmia' refers to a resting heart-rate near or over 100 BPM.",
     "correct_answer": "True", "incorrect_answers": ["False"]},
    {"type": "boolean", "difficulty": "medium", "category": "Science &amp; Nature",
     "question": "Centripedal force is an apparent force that acts outward on a body moving around a center, arising from the body's inertia.",
     "correct_answer": "False", "incorrect_answers": ["True"]},
    {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
     "question": "An exothermic reaction is a chemical reaction that releases energy by radiating electricity.",
     "correct_answer": "False", "incorrect_answers": ["True"]},
    {"type": "boolean", "difficulty": "medium", "category": "Science &amp; Nature",
     "question": "The Neanderthals were a direct ancestor of modern humans.",
     "correct_answer": "False", "incorrect_answers": ["True"]},
    {"type": "boolean", "difficulty": "medium", "category": "Science &amp; Nature",
     "question": "Sugar contains fat.", "correct_answer": "False",
     "incorrect_answers": ["True"]},
    {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
     "question": "A plant that has a life cycle for more than a year is known as an annual.",
     "correct_answer": "False", "incorrect_answers": ["True"]},
    {"type": "boolean", "difficulty": "medium", "category": "Science &amp; Nature",
     "question": "In the periodic table, Potassium's symbol is the letter K.",
     "correct_answer": "True", "incorrect_answers": ["False"]},
    {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
     "question": "Celiac Disease is a disease that effects the heart, causing those effected to be unable to eat meat.",
     "correct_answer": "False", "incorrect_answers": ["True"]}
]



class Question:
    def __init__(self, question, correct_answer):
        self.question = question
        self.correct_answer = correct_answer



class QuizBrain:
    def __init__(self, question_list):
        self.question_number = 0
        self.question_list = question_list
        self.score = 0

    def still_has_questions(self):
        return self.question_number < len(self.question_list)

    def next_question(self):
        current_question = self.question_list[self.question_number]
        self.question_number += 1
        user_answer = input(f"Q.{self.question_number}: {current_question.question} (True/False): ")
        self.check_answer(user_answer, current_question.correct_answer)

    def check_answer(self, user_answer, correct_answer):
        if user_answer.lower() == correct_answer.lower():
            self.score += 1
            print("Congrats, you are correct!")
        else:
            print("Sorry, you are incorrect.")
        print(f"The correct answer was {correct_answer}.")
        print(f"Your current score: {self.score}/{self.question_number}")
        print("\n")



question_bank = []

for question in question_data:
    question_question = question["question"]
    question_correct_answer = question["correct_answer"]
    new_question = Question(question_question, question_correct_answer)
    question_bank.append(new_question)

quiz = QuizBrain(question_bank)

while quiz.still_has_questions():
    quiz.next_question()

print("You've completed the quiz.")
print(f"Your final score: {quiz.score}/{quiz.question_number}")





-------SNAKE GAME-------

from turtle import Turtle
STARTING_POSITIONS = [(0, 0), (-20, 0), (-40, 0)]
MOVE_DISTANCE = 20
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0

class Snake:

    def __init__(self):
        self.segments = []
        self.create_snake()
        self.head = self.segments[0]

    def create_snake(self):
        for position in STARTING_POSITIONS:
            self.add_segment(position)

    def add_segment(self, position):
        new_segment = Turtle("square")
        new_segment.color("white")
        new_segment.penup()
        new_segment.goto(position)
        self.segments.append(new_segment)

    def extend(self):
        self.add_segment(self.segments[-1].position())

    def move(self):
        for seg_num in range(len(self.segments) - 1, 0, -1):
            new_x = self.segments[seg_num - 1].xcor()
            new_y = self.segments[seg_num - 1].ycor()
            self.segments[seg_num].goto(new_x, new_y)
        self.head.forward(MOVE_DISTANCE)

    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(UP)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(DOWN)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(LEFT)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(RIGHT)

from turtle import Turtle
import random

class Food(Turtle):
    def __init__(self):
        super(). __init__()
        self.shape("circle")
        self.penup()
        self.shapesize(stretch_len = 0.5, stretch_wid = 0.5)
        self.color("Aquamarine")
        self.speed("fastest")
        self.refresh()

    def refresh(self):
        random_x = random.randint(-280, 280)
        random_y = random.randint(-280, 280)
        self.goto(random_x, random_y)

from turtle import Turtle
ALIGNMENT = "center"
FONT = ("Courier", 24, "normal")

class Scoreboard(Turtle):
    def __init__(self):
        super().__init__()
        self.score = 0
        self.color("white")
        self.penup()
        self.goto(0, 270)
        self.update_scoreboard()
        self.hideturtle()

    def update_scoreboard(self):
        self.write(f"Score = {self.score}", align=ALIGNMENT, font=FONT)

    def increase_score(self):
        self.score += 1
        self.clear()
        self.update_scoreboard()

    def game_over(self):
        self.clear()
        self.goto(0,0)
        self.color("red")
        self.write(f"Game Over. Score = {self.score}", align=ALIGNMENT, font=FONT)

from turtle import Screen
from snake import Snake
from food import Food
from scoreboard import Scoreboard
import time

screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor("black")
screen.title("The Snake Game")
screen.tracer(0)

snake = Snake()
food = Food()
scoreboard = Scoreboard()

screen.listen()
screen.onkey(snake.up, "Up")
screen.onkey(snake.down, "Down")
screen.onkey(snake.left, "Left")
screen.onkey(snake.right, "Right")

game_is_on = True
while game_is_on:
    screen.update()
    time.sleep(0.1)
    snake.move()

    #Detect collision with food
    if snake.head.distance(food) < 15:
        food.refresh()
        snake.extend()
        scoreboard.increase_score()

    #Detect collision with wall
    if snake.head.xcor() > 280 or snake.head.xcor() < -280 or snake.head.ycor() > 280 or snake.head.ycor() < -280:
        game_is_on = False
        scoreboard.game_over()

    #Detect collision with tail
    for segment in snake.segments[1:]:
        if snake.head.distance(segment) < 10:
            game_is_on = False
            scoreboard.game_over()

screen.exitonclick()





-------PONG GAME-------

from turtle import Turtle

class Ball(Turtle):
    def __init__(self):
        super().__init__()
        self.shape("circle")
        self.color("white")
        self.penup()
        self.x_move = 3
        self.y_move = 3

    def move(self):
        new_x = self.xcor() + self.x_move
        new_y = self.ycor() + self.y_move
        self.goto(new_x, new_y)

    def bounce_y(self):
        self.y_move *= -1

    def bounce_x(self):
        self.x_move *= -1

    def reset_ball(self):
        self.goto(0,0)
        self.bounce_x()

from turtle import Turtle

class Paddle(Turtle):
    def __init__(self, position):
        super().__init__()
        self.shape("square")
        self.color("white")
        self.shapesize(stretch_wid = 5, stretch_len = 1)
        self.penup()
        self.goto(position)

    def go_up(self):
        new_y = self.ycor() + 20
        self.goto(self.xcor(), new_y)

    def go_down(self):
        new_y = self.ycor() - 20
        self.goto(self.xcor(), new_y)

from turtle import Turtle
ALIGNMENT = "Center"
FONT = ("Courier", 20, "normal")

class Scoreboard(Turtle):
    def __init__(self):
        super().__init__()
        self.color("white")
        self.penup()
        self.hideturtle()
        self.l_score = 0
        self.r_score = 0
        self.update_scoreboard()

    def update_scoreboard(self):
        self.clear()
        self.goto(-170, 240)
        self.write(f"PLAYER 1: {self.l_score}", align=ALIGNMENT, font=FONT)
        self.goto(170, 240)
        self.write(f"PLAYER 2: {self.r_score}", align=ALIGNMENT, font=FONT)

    def l_point(self):
        self.l_score += 1

    def r_point(self):
        self.r_score += 1

from turtle import Screen
from paddle import Paddle
from ball import Ball
from scoreboard import Scoreboard
import time

screen = Screen()
scoreboard = Scoreboard()
screen.setup(width=800, height=600)
screen.bgcolor("DarkSlateGrey")
screen.title("PONG")
screen.tracer(0)

l_paddle = Paddle((-350, 0))
r_paddle = Paddle((350, 0))
ball = Ball()

screen.listen()
screen.onkey(r_paddle.go_up, "Up")
screen.onkey(r_paddle.go_down, "Down")
screen.onkey(l_paddle.go_up, "w")
screen.onkey(l_paddle.go_down, "s")

game_is_on = True

while game_is_on:
    screen.update()
    ball.move()

    # Detect collision with wall
    if ball.ycor() > 290 or ball.ycor() < -290:
        ball.bounce_y()

    # Detect collision with paddle
    if ball.distance(r_paddle) < 50 and ball.xcor() > 340 or ball.distance(l_paddle) < 50 and ball.xcor() < -340:
        ball.bounce_x()

    # Detect r_paddle miss
    if ball.xcor() > 390:
        ball.reset_ball()
        scoreboard.l_point()
        scoreboard.update_scoreboard()
        time.sleep(1)

    # Detect l_paddle miss
    if ball.xcor() < -390:
        ball.reset_ball()
        scoreboard.r_point()
        scoreboard.update_scoreboard()
        time.sleep(1)

screen.exitonclick()





-------TURTLE CROSSING GAME-------

from turtle import Turtle
STARTING_POSITION = (0, -280)
MOVE_DISTANCE = 10
FINISH_LINE_Y = 280

class Player(Turtle):
    def __init__(self):
        super().__init__()
        self.shape("turtle")
        self.color("white")
        self.penup()
        self.goto(STARTING_POSITION)
        self.setheading(90)

    def player_up(self):
        self.forward(MOVE_DISTANCE)

    def player_down(self):
        self.backward(MOVE_DISTANCE)

    def go_to_start(self):
        self.goto(STARTING_POSITION)

    def is_at_finish_line(self):
        if self.ycor() > FINISH_LINE_Y:
            return True
        else:
            return False

from turtle import Turtle
import random
COLORS = ["LightSalmon", "HoneyDew", "NavajoWhite", "LemonChiffon", "LightPink", "Lavender", "LightCyan"]
STARTING_MOVE_DISTANCE = 5
MOVE_INCREMENT = 10

class CarManager:
    def __init__(self):
        self.all_cars = []
        self.car_speed = STARTING_MOVE_DISTANCE

    def create_car(self):
        random_chance = random.randint(1, 6)
        if random_chance == 1:
            new_car = Turtle("square")
            new_car.shapesize(stretch_wid = 1, stretch_len = 2)
            new_car.color(random.choice(COLORS))
            new_car.penup()
            random_y = random.randint(-240, 240)
            new_car.goto(300, random_y)
            self.all_cars.append(new_car)

    def move_cars(self):
        for car in self.all_cars:
            car.backward(STARTING_MOVE_DISTANCE)

    def level_up(self):
        self.car_speed += MOVE_INCREMENT

from turtle import Turtle
ALIGNMENT = "Center"
FONT = ("Courier", 24, "normal")

class Scoreboard(Turtle):
    def __init__(self):
        super().__init__()
        self.hideturtle()
        self.penup()
        self.color("white")
        self.goto(-235,255)
        self.level = 1
        self.update_scoreboard()

    def update_scoreboard(self):
        self.clear()
        self.write(f"Level: {self.level}", align=ALIGNMENT, font=FONT)

    def increase_level(self):
        self.level += 1
        self.update_scoreboard()

    def you_lose(self):
        self.goto(0,0)
        self.write("GAME OVER.", align=ALIGNMENT, font=FONT)

import time
from turtle import Screen
from player import Player
from car_manager import CarManager
from scoreboard import Scoreboard

screen = Screen()
screen.title("Turtle Crossing Game")
screen.setup(width=600, height=600)
screen.bgcolor("Teal")
screen.tracer(0)

player = Player()
car_manager = CarManager()
scoreboard = Scoreboard()

screen.listen()
screen.onkey(player.player_up,"Up")
screen.onkey(player.player_down,"Down")

game_is_on = True
while game_is_on:
    time.sleep(0.1)
    screen.update()
    car_manager.create_car()
    car_manager.move_cars()

    # Detect cars
    for car in car_manager.all_cars:
        if car.distance(player) < 20:
            game_is_on = False
            scoreboard.you_lose()

    # Detect finish line
    if player.is_at_finish_line():
        player.go_to_start()
        car_manager.level_up()
        scoreboard.increase_level()

screen.exitonclick()





-------50 UNITED STATES GAME-------

state,x,y
Alabama,139,-77
Alaska,-204,-170
Arizona,-203,-40
Arkansas,57,-53
California,-297,13
Colorado,-112,20
Connecticut,297,96
Delaware,275,42
Florida,220,-145
Georgia,182,-75
Hawaii,-317,-143
Idaho,-216,122
Illinois,95,37
Indiana,133,39
Iowa,38,65
Kansas,-17,5
Kentucky,149,1
Louisiana,59,-114
Maine,319,164
Maryland,288,27
Massachusetts,312,112
Michigan,148,101
Minnesota,23,135
Mississippi,94,-78
Missouri,49,6
Montana,-141,150
Nebraska,-61,66
Nevada,-257,56
New Hampshire,302,127
New Jersey,282,65
New Mexico,-128,-43
New York,236,104
North Carolina,239,-22
North Dakota,-44,158
Ohio,176,52
Oklahoma,-8,-41
Oregon,-278,138
Pennsylvania,238,72
Rhode Island,318,94
South Carolina,218,-51
South Dakota,-44,109
Tennessee,131,-34
Texas,-38,-106
Utah,-189,34
Vermont,282,154
Virginia,234,12
Washington,-257,193
West Virginia,200,20
Wisconsin,83,113
Wyoming,-134,90

import turtle
import pandas

screen = turtle.Screen()
screen.setup(width = 725, height = 491)
screen.bgpic("blank_states_img.gif")
screen.title("The 50 United States Game")

data = pandas.read_csv("50_states.csv")
all_states = data.state.to_list()
guessed_states = []
correct = 0

while len(guessed_states) < 50:

    answer = screen.textinput(f"{correct}/50 States Correct", "Name a state: ").title()

    if answer =="Exit":
        missing_states = []
        for state in all_states:
            if state not in guessed_states:
                missing_states.append(state)
        new_data = pandas.DataFrame(missing_states)
        new_data.to_csv("missing_states.csv")
        break
    if answer in all_states:
        guessed_states.append(answer)
        t = turtle.Turtle()
        t.hideturtle()
        t.penup()
        state_data = data[data.state == answer]
        t.goto(state_data.x.item(), state_data.y.item())
        t.write(answer)
        correct +=1





-------POMODORO TIMER-------

from tkinter import *
import math

#CONSTANTS
PINK = "#e2979c"
RED = "#e7305b"
GREEN = "#9bdeac"
YELLOW = "#f7f5dd"
FONT_NAME = "Courier"
WORK_MIN = 20
SHORT_BREAK_MIN = 5
LONG_BREAK_MIN = 10
reps = 0
main_timer = None

#TIMER RESET
def reset_timer():
    window.after_cancel(main_timer)
    canvas.itemconfig(timer, text = "00:00")
    timer_label.config(text = "Timer")
    checkmarks_label.config(text = "")
    global reps
    reps = 0

#TIMER MECHANISM
def start_timer():
    global reps
    reps +=1

    work_sec = WORK_MIN * 60
    short_break_sec = SHORT_BREAK_MIN * 60
    long_break_sec = LONG_BREAK_MIN * 60

    if reps == 1 or reps == 3 or reps == 5 or reps == 7:
        count_down(work_sec)
        timer_label.config(text = "Work", fg = GREEN)
    elif reps == 2 or reps == 4 or reps == 6:
        count_down(short_break_sec)
        timer_label.config(text = "Short Break", fg = PINK)
    elif reps == 8:
        count_down(long_break_sec)
        timer_label.config(text = "Long Break", fg = RED)

#COUNTDOWN MECHANISM
def count_down(count):
    count_min = math.floor(count / 60)
    count_sec = count % 60
    if count_sec < 10:
        count_sec = f"0{count_sec}"
    canvas.itemconfig(timer, text = f"{count_min}:{count_sec}")
    if count > 0:
        global main_timer
        main_timer = window.after(1000, count_down, count - 1)
    else:
        start_timer()
        marks = ""
        work_sessions = math.floor(reps / 2)
        for _ in range(work_sessions):
            marks += "✔︎"
        checkmarks_label.config(text = marks)

#UI SETUP
window = Tk()
window.title("Pomodoro")
window.config(padx = 100, pady = 50, bg = YELLOW)

canvas = Canvas(width = 200, height = 224, bg = YELLOW, highlightthickness = 0)
tomato = PhotoImage(file = "tomato.png")
canvas.create_image(100, 112, image = tomato)
timer = canvas.create_text(100, 130, text = "00:00", fill = "white", font = (FONT_NAME, 34, "bold"))
canvas.grid(row = 1, column = 1)

timer_label = Label(text = "Timer", font = (FONT_NAME, 50), bg = YELLOW, fg = GREEN)
timer_label.grid(row = 0, column = 1)

checkmarks_label = Label(font = (FONT_NAME, 30), bg = YELLOW, fg = GREEN)
checkmarks_label.grid(row = 3, column = 1)

start_button = Button(text = "Start", command = start_timer, font = (FONT_NAME, 16), padx = 2, pady = 2, highlightthickness = 0)
start_button.grid(row = 2, column = 0)

reset_button = Button(text = "Reset", command = reset_timer, font = (FONT_NAME, 16), padx = 2, pady = 2, highlightthickness = 0)
reset_button.grid(row = 2, column = 2)

window.mainloop()





-------PASSWORD MANAGER-------

from tkinter import *
from tkinter import messagebox
import random
import pyperclip
FONT = "Arial"

#PASSWORD GENERATOR
def generate():
    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
    numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']

    nr_letters = random.randint(8, 10)
    nr_symbols = random.randint(2, 4)
    nr_numbers = random.randint(2, 4)

    password_letters = [random.choice(letters) for _ in range(nr_letters)]
    password_numbers = [random.choice(numbers) for _ in range(nr_numbers)]
    password_symbols = [random.choice(symbols) for _ in range(nr_symbols)]

    password_list = password_letters + password_symbols + password_numbers
    random.shuffle(password_list)

    password = "".join(password_list)
    password_entry.insert(0, password)
    pyperclip.copy(password)

#SAVE PASSWORD
def save():
    website = website_entry.get()
    email = email_entry.get()
    password = password_entry.get()

    if len(website)  == 0 or len(password) == 0:
        messagebox.showinfo(title = "Error", message = "One or more fields have been left empty.")

    else:
        is_ok = messagebox.askokcancel(title = website, message = f"These are the details entered: \nEmail: "
                                                          f"{email} \nPassword: {password} \n Is it okay to save?")
        if is_ok:
            with open("data.text", "a") as data_file:
                data_file.write(f"{website} | {email} | {password}\n")
                website_entry.delete(0, END)
                password_entry.delete(0, END)

#UI SETUP
window = Tk()
window.title("Password Manager")
window.config(padx = 50, pady = 50, bg = "white")

canvas = Canvas(width = 200, height = 200, bg = "white", highlightthickness = 0)
logo = PhotoImage(file = "logo.png")
canvas.create_image(100, 100, image = logo)
canvas.grid(row = 0, column = 1)

website_label = Label(text = "Website:", font = (FONT, 16), fg = "black", bg = "white", pady = 2)
website_label.grid(row = 1, column = 0)

email_label = Label(text = "Email/Username:", font = (FONT, 16), fg = "black", bg = "white", pady = 2)
email_label.grid(row = 2, column = 0)

password_label = Label(text = "Password:", font = (FONT, 16), fg = "black", bg = "white", pady = 2)
password_label.grid(row = 3, column = 0)

website_entry = Entry(bg = "white", fg = "black", width = 36, highlightthickness = 2.5)
website_entry.grid(row = 1, column = 1, columnspan = 2)
website_entry.focus()

email_entry = Entry(bg = "white", fg = "black", width = 36, highlightthickness = 2.5)
email_entry.grid(row = 2, column = 1, columnspan = 2)
email_entry.insert(0, "sarah.warner@helix.com")

password_entry = Entry(bg = "white", fg = "black", width = 22, highlightthickness = 2.5)
password_entry.grid(row = 3, column = 1)

generate_button = Button(text = "Generate Password", padx = 2, pady = 2, width = 10, highlightthickness = 0, command = generate)
generate_button.grid(row = 3, column = 2)

add_button = Button(text = "Add", padx = 2, pady = 2, width = 33, highlightthickness = 0, command = save)
add_button.grid(row = 4, column = 1, columnspan = 2)

window.mainloop()

